
servo_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e8  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000125  00000000  00000000  000003e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c9  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ea  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c8  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000008c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <servo_init>:
#define _servo_H_

servo_init()
{
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	82 6a       	ori	r24, 0xA2	; 162
  70:	8f bd       	out	0x2f, r24	; 47
   TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM) extremeele
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	8b 61       	ori	r24, 0x1B	; 27
  76:	8e bd       	out	0x2e, r24	; 46

   ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
  78:	87 e8       	ldi	r24, 0x87	; 135
  7a:	93 e1       	ldi	r25, 0x13	; 19
  7c:	97 bd       	out	0x27, r25	; 39
  7e:	86 bd       	out	0x26, r24	; 38

   DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 63       	ori	r24, 0x30	; 48
  84:	81 bb       	out	0x11, r24	; 17
}
  86:	08 95       	ret

00000088 <set_degree>:
float set_degree(int d)
{
	OCR1A =160+((22*d)/9);
  88:	26 e1       	ldi	r18, 0x16	; 22
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	ac 01       	movw	r20, r24
  8e:	42 9f       	mul	r20, r18
  90:	c0 01       	movw	r24, r0
  92:	43 9f       	mul	r20, r19
  94:	90 0d       	add	r25, r0
  96:	52 9f       	mul	r21, r18
  98:	90 0d       	add	r25, r0
  9a:	11 24       	eor	r1, r1
  9c:	69 e0       	ldi	r22, 0x09	; 9
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 7f 00 	call	0xfe	; 0xfe <__divmodhi4>
  a4:	60 56       	subi	r22, 0x60	; 96
  a6:	7f 4f       	sbci	r23, 0xFF	; 255
  a8:	7b bd       	out	0x2b, r23	; 43
  aa:	6a bd       	out	0x2a, r22	; 42
}
  ac:	08 95       	ret

000000ae <main>:

#include "servo.h"


int main()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	servo_init();	//Initializing the servo
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <servo_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	c0 e9       	ldi	r28, 0x90	; 144
  b8:	d1 e0       	ldi	r29, 0x01	; 1

	while (1)
	{
	//Any angle of rotation(0 to 180) can be given
	
	set_degree(0);		//For 0 degree rotation
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 44 00 	call	0x88	; 0x88 <set_degree>
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	97 e2       	ldi	r25, 0x27	; 39
  c6:	fe 01       	movw	r30, r28
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x18>
	_delay_ms(1000);	//Delay for 1s
	
    set_degree(90);		//For 90 degree rotation
  d0:	8a e5       	ldi	r24, 0x5A	; 90
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 44 00 	call	0x88	; 0x88 <set_degree>
  d8:	80 e1       	ldi	r24, 0x10	; 16
  da:	97 e2       	ldi	r25, 0x27	; 39
  dc:	fe 01       	movw	r30, r28
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e4:	d9 f7       	brne	.-10     	; 0xdc <main+0x2e>
    _delay_ms(1000);	//Delay for 1s
	
	set_degree(180);	//For 180 degree rotation
  e6:	84 eb       	ldi	r24, 0xB4	; 180
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 44 00 	call	0x88	; 0x88 <set_degree>
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	97 e2       	ldi	r25, 0x27	; 39
  f2:	fe 01       	movw	r30, r28
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x44>
  fc:	de cf       	rjmp	.-68     	; 0xba <main+0xc>

000000fe <__divmodhi4>:
  fe:	97 fb       	bst	r25, 7
 100:	09 2e       	mov	r0, r25
 102:	07 26       	eor	r0, r23
 104:	0a d0       	rcall	.+20     	; 0x11a <__divmodhi4_neg1>
 106:	77 fd       	sbrc	r23, 7
 108:	04 d0       	rcall	.+8      	; 0x112 <__divmodhi4_neg2>
 10a:	0c d0       	rcall	.+24     	; 0x124 <__udivmodhi4>
 10c:	06 d0       	rcall	.+12     	; 0x11a <__divmodhi4_neg1>
 10e:	00 20       	and	r0, r0
 110:	1a f4       	brpl	.+6      	; 0x118 <__divmodhi4_exit>

00000112 <__divmodhi4_neg2>:
 112:	70 95       	com	r23
 114:	61 95       	neg	r22
 116:	7f 4f       	sbci	r23, 0xFF	; 255

00000118 <__divmodhi4_exit>:
 118:	08 95       	ret

0000011a <__divmodhi4_neg1>:
 11a:	f6 f7       	brtc	.-4      	; 0x118 <__divmodhi4_exit>
 11c:	90 95       	com	r25
 11e:	81 95       	neg	r24
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	08 95       	ret

00000124 <__udivmodhi4>:
 124:	aa 1b       	sub	r26, r26
 126:	bb 1b       	sub	r27, r27
 128:	51 e1       	ldi	r21, 0x11	; 17
 12a:	07 c0       	rjmp	.+14     	; 0x13a <__udivmodhi4_ep>

0000012c <__udivmodhi4_loop>:
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	a6 17       	cp	r26, r22
 132:	b7 07       	cpc	r27, r23
 134:	10 f0       	brcs	.+4      	; 0x13a <__udivmodhi4_ep>
 136:	a6 1b       	sub	r26, r22
 138:	b7 0b       	sbc	r27, r23

0000013a <__udivmodhi4_ep>:
 13a:	88 1f       	adc	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	5a 95       	dec	r21
 140:	a9 f7       	brne	.-22     	; 0x12c <__udivmodhi4_loop>
 142:	80 95       	com	r24
 144:	90 95       	com	r25
 146:	bc 01       	movw	r22, r24
 148:	cd 01       	movw	r24, r26
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
